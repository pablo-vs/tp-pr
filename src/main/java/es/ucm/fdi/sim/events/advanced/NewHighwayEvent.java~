package es.ucm.fdi.sim.events.advanced;

import java.util.List;
import java.util.ArrayList;
import java.lang.IllegalArgumentException;

import es.ucm.fdi.ini.IniSection;
import es.ucm.fdi.sim.objects.Road;
import es.ucm.fdi.sim.objects.RoadMap;
import es.ucm.fdi.sim.objects.Vehicle;
import es.ucm.fdi.sim.objects.Junction;
import es.ucm.fdi.sim.objects.advanced.Highway;
import es.ucm.fdi.exceptions.ObjectNotFoundException;

/**
 * Represents the New Highway Event.
 *
 * @version 10.03.2018
 */
public class NewHighwayEvent extends Event {
	private int lanes;

	/**
	 * Empty constructor.
	 */
	public NewHighwayEvent(){}

	/**
	 * Full constructor.
	 *
	 * @param t Time of the event.
	 * @param id ID of the highway.
	 * @param ini Initial junction.
	 * @param end Final junction.
	 * @param v Maximum speed.
	 * @param l Length of the road.
	 * @param lanes Number of lanes.
	 */
	public NewHighwayEvent(int t, String id, String ini, String end, int v, int l, int lanes){
		super(t, id, ini, end, v, l);
		roadID = id;
		this.ini = ini;
		this.end = end;
		maxVel = v;
		length = l;
	}

	/**
	 * Instantiates a new road, given the parameters are valid.
	 *
	 * @param r The <code>RoadMap</code> of the current simulation.
	 */
	@Override
	public void execute(RoadMap r) {
		r.addRoad(createRoad(r));
	}

	/**
	 * Creates a new Road with the event parameters, if possible.
	 *
	 * @return The corresponding Road.
	 */
	public Highway createHighway(RoadMap r) {
		Junction iniJ, endJ;
		Road newRoad;
		try {
			iniJ = r.getJunction(ini);
			endJ = r.getJunction(end);
			if(iniJ == null){
				throw new ObjectNotFoundException("Error: no junction with id " + ini);
			}
			if(endJ == null){
				throw new ObjectNotFoundException("Error: no junction with id " + end);
			}
			newRoad = new Road(roadID, length, maxVel, iniJ, endJ);
			
			
		} catch (ObjectNotFoundException e){
			throw new IllegalArgumentException("Error: Could not create road " + roadID + " at time " + getTime() + ".\n" + e.getMessage(), e);
		}
		return newRoad;
	}
    
	/**
	 * Builder for this event.
	 */
	public static class Builder extends NewRoadEvent.Builder{
	        public static final String TYPE = "lanes";

		/**
		 * Build the event from a given INI section, returns null if the section tag does
		 * not match the event tag.
		 *
		 * @param section The <code>IniSection</code> from which to parse the event.
		 */
		@Override
		public NewHighwayEvent build(IniSection ini){
			NewHighwayEvent event = null;
			int time, maxVel, length;
			String id, iniJ, endJ;
			
			if(TAG.equals(ini.getTag()) && isCorrectType(TYPE)) {
				try{
					time = parseTime(ini);
					id = parseID(ini, "id");
					iniJ = parseID(ini, "src");
					endJ = parseID(ini, "dest");
					maxVel = parsePositiveInt(ini, "max_speed");
					length = parsePositiveInt(ini, "length");
					
					event = new NewRoadEvent(time, id, iniJ, endJ, maxVel, length);
								 
				} catch (Exception e){
					throw new IllegalArgumentException("Error while parsing event:\n" + e.getMessage(), e);
				}	
			}

			return event;
		}
	}
}
